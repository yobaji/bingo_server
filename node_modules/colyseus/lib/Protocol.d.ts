/// <reference types="node" />
import { Client } from './index';
export declare enum Protocol {
    JOIN_ROOM = 10,
    JOIN_ERROR = 11,
    LEAVE_ROOM = 12,
    ROOM_DATA = 13,
    ROOM_STATE = 14,
    ROOM_STATE_PATCH = 15,
    WS_CLOSE_NORMAL = 1000,
    WS_CLOSE_CONSENTED = 4000,
    WS_CLOSE_WITH_ERROR = 4002,
    WS_SERVER_DISCONNECT = 4201,
    WS_TOO_MANY_CLIENTS = 4202,
    ERR_MATCHMAKE_NO_HANDLER = 4210,
    ERR_MATCHMAKE_INVALID_CRITERIA = 4211,
    ERR_MATCHMAKE_INVALID_ROOM_ID = 4212,
    ERR_MATCHMAKE_UNHANDLED = 4213,
    ERR_MATCHMAKE_EXPIRED = 4214
}
export declare enum IpcProtocol {
    SUCCESS = 0,
    ERROR = 1,
    TIMEOUT = 2
}
export declare function decode(message: any): any;
export declare const send: {
    [Protocol.JOIN_ERROR]: (client: Client, message: string) => void;
    [Protocol.JOIN_ROOM]: (client: Client, serializerId: string, handshake?: number[]) => void;
    [Protocol.ROOM_STATE]: (client: Client, bytes: number[]) => void;
    [Protocol.ROOM_STATE_PATCH]: (client: Client, bytes: number[]) => void;
    [Protocol.ROOM_DATA]: (client: Client, data: any, encode?: boolean) => void;
};
export declare function utf8Write(buff: Buffer, offset: number, str?: string): void;
export declare function utf8Length(str?: string): number;
